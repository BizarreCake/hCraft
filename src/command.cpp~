/* 
 * hCraft - A custom Minecraft server.
 * Copyright (C) 2012	Jacob Zhitomirsky
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "command.hpp"


namespace hCraft {
	
	/* 
	 * Constructs a new command reader from the given string (should be in the
	 * form of: /<cmd> <arg1> <arg2> ... <argN>
	 */
	command_reader::command_reader (const std::string& str)
	{
		// extract the command name.
		int i = 1;
		std::string::size_type sp = str.find_first_of (' ');
		this->name.reserve (((sp == std::string::npos) ? str.size () : sp) + 1);
		for (int j = ((sp == std::string::npos) ? str.size () : sp); i < j; ++i)
			this->name.push_back (str[i]);
		
		// extract the arguments as a whole.
		this->args.reserve ((str.size () - i) + 1);
		for (++i; i < str.size (); ++i)
			this->args.push_back (str[i]);
	}
	
	
	
	/* 
	 * Returns the name of the parsed command.
	 */
	const std::string&
	command_reader::command_name ()
	{
		return this->name;
	}
	
	
	
	/* 
	 * Parses the argument list.
	 * In case of an error, false is returned and an appropriate message is sent
	 * to player @{err}.
	 */
	bool
	command_reader::parse_args (player *err)
	{
		
		return true;
	}
	
	
	
//------------
	
	/* 
	 * Class destructor.
	 * Destroys all registered commands.
	 */
	command_list::~command_list ()
	{
		for (auto itr = this->commands.begin (); itr != this->commands.end (); ++itr)
			{
				command *cmd = itr->second;
				delete cmd;
			}
		this->commands.clear ();
	}
	
	/* 
	 * Adds the specified command to the list.
	 */
	void
	command_list::add (command *cmd)
	{
		this->commands[cmd->get_name ()] = cmd;
	}
	
	/* 
	 * Finds the command that has the specified name (case-sensitive).
	 */
	command*
	command_list::find (const char *name)
	{
		
	}
}

