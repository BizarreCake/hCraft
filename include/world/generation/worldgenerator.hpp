/* 
 * hCraft - A custom Minecraft server.
 * Copyright (C) 2012-2013	Jacob Zhitomirsky (BizarreCake)
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _hCraft__WORLDGENERATOR_H_
#define _hCraft__WORLDGENERATOR_H_

#include "world/chunk.hpp"
#include <vector>
#include <random>


namespace hCraft {
	
	class world;
	
	/* 
	 * Base class for all world generators.
	 */
	class world_generator
	{
	public:
		virtual ~world_generator () { }
		virtual void generate (world& wr, chunk *out, int cx, int cz) = 0;
		virtual void generate_edge (world& wr, chunk *out);
		
		
		/* 
		 * Returns the name of this generator.
		 */
		virtual const char* name () = 0;
		virtual long seed () = 0;
		virtual void seed (long new_seed) = 0;
		
		/* 
		 * Finds and instantiates a new world generator from the given name.
		 */
		static world_generator* create (const char *name, long seed);
		static world_generator* create (const char *name);
	};
	
	
	/* 
	 * Unlike the world_generator, full chunks are not generated by the classes
	 * that derive this one. Instead, detail_generators are more suited to
	 * ornament a world with *usually* smaller things (e.g.:  trees, lakes, etc...)
	 */
	class detail_generator
	{
	public:
		virtual ~detail_generator () { }
		
		virtual void seed (long s) { };
		virtual void generate (world &wr, int x, int y, int z) = 0;
	};
	
	
	
//------------------------------------------------------------------------------
	
	class biome_generator
	{
	public:
		virtual ~biome_generator () { }
		
		// used by three-dimensional generators
		virtual bool is_3d () = 0;
		virtual int min_y () { return 0; }
		virtual int max_y () { return 0; }
		
		virtual void seed (long s) { }
		virtual double generate (int x, int y, int z) = 0;
		virtual void decorate (world &w, chunk *ch, int x, int z, std::minstd_rand& rnd) = 0;
	};
	
	
	
	struct biome_info
	{
		biome_generator *bgen;
		
		double start;
		double end;
	};
	
	namespace internal {
		
		struct interp_entry
			{
				int x, z;
				double h;
			};
	}
	
	class biome_selector
	{
		int water_level;
		std::vector<biome_info> biomes;
		double edge_falloff;
		long gen_seed;
		bool bedrock;
		
		double next_start;
		
		internal::interp_entry interp_cache[24];
		
	private:
		biome_generator* find_biome (double t);
		
		// these functions assume that the user knows what type of biome they're
		// currently in (2d or 3d).
		double get_value_2d (double x, double z);
		double get_value_3d (double x, double y, double z);
		
	public:
		/* 
		 * Constructs a new biome selector with the specified default water level.
		 */
		biome_selector (int water_level = 64, bool bedrock = true, double edge_falloff = 0.85);
		
		/* 
		 * Destroys all biome generators held by the selector.
		 */
		~biome_selector ();
		
		
		
		/* 
		 * Inserts a new biome with the specified occurrence rate (percentage, %0-%100).
		 */
		void add (biome_generator *bgen, double occurrence);
		
		
		
		/* 
		 * Uses the selector's biomes to generate terrain on the given chunk.
		 */
		void generate (world &w, chunk *ch, int cx, int cz);
		
		/* 
		 * Seeds the internal generators used by the biome selector.
		 */
		void seed (long seed);
	};
}

#endif

